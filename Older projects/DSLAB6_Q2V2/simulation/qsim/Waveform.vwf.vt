// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/02/2022 17:38:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DSLAB6_Q2V2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DSLAB6_Q2V2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg 4L;
reg 5L;
reg 6L;
reg 7L;
// wires                                               
wire 0A;
wire 0B;
wire 0C;
wire 0D;
wire 0E;
wire 0F;
wire 0G;
wire 1A;
wire 1B;
wire 1C;
wire 1D;
wire 1E;
wire 1F;
wire 1G;

// assign statements (if any)                          
DSLAB6_Q2V2 i1 (
// port map - connection between master ports and signals/registers   
	.\0A (0A),
	.\0B (0B),
	.\0C (0C),
	.\0D (0D),
	.\0E (0E),
	.\0F (0F),
	.\0G (0G),
	.\1A (1A),
	.\1B (1B),
	.\1C (1C),
	.\1D (1D),
	.\1E (1E),
	.\1F (1F),
	.\1G (1G),
	.\4L (4L),
	.\5L (5L),
	.\6L (6L),
	.\7L (7L)
);
initial 
begin 
#1000000 $finish;
end 

// 4L
initial
begin
	4L = 1'b0;
	4L = #320000 1'b1;
	4L = #320000 1'b0;
	4L = #320000 1'b1;
end 

// 5L
initial
begin
	repeat(3)
	begin
		5L = 1'b0;
		5L = #160000 1'b1;
		# 160000;
	end
	5L = 1'b0;
end 

// 6L
initial
begin
	repeat(6)
	begin
		6L = 1'b0;
		6L = #80000 1'b1;
		# 80000;
	end
	6L = 1'b0;
end 

// 7L
initial
begin
	repeat(12)
	begin
		7L = 1'b0;
		7L = #40000 1'b1;
		# 40000;
	end
	7L = 1'b0;
end 
endmodule

