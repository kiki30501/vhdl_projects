// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2022 15:18:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DSLAB7_Q2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DSLAB7_Q2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IN_R1;
reg IN_R2;
reg IN_R3;
reg IN_UMPIRE;
// wires                                               
wire OUT_Q1;
wire OUT_Q2;
wire OUT_Q3;

// assign statements (if any)                          
DSLAB7_Q2 i1 (
// port map - connection between master ports and signals/registers   
	.IN_R1(IN_R1),
	.IN_R2(IN_R2),
	.IN_R3(IN_R3),
	.IN_UMPIRE(IN_UMPIRE),
	.OUT_Q1(OUT_Q1),
	.OUT_Q2(OUT_Q2),
	.OUT_Q3(OUT_Q3)
);
initial 
begin 
#1000000 $finish;
end 

// IN_R1
initial
begin
	IN_R1 = 1'b0;
	IN_R1 = #10000 1'b1;
	IN_R1 = #10000 1'b0;
	IN_R1 = #30000 1'b1;
	IN_R1 = #10000 1'b0;
	IN_R1 = #140000 1'b1;
	IN_R1 = #10000 1'b0;
	IN_R1 = #40000 1'b1;
	IN_R1 = #20000 1'b0;
	IN_R1 = #140000 1'b1;
	# 10000;
	repeat(6)
	begin
		IN_R1 = 1'b0;
		IN_R1 = #10000 1'b1;
		# 10000;
	end
	IN_R1 = 1'b0;
	IN_R1 = #120000 1'b1;
	IN_R1 = #50000 1'b0;
	IN_R1 = #70000 1'b1;
	IN_R1 = #40000 1'b0;
end 

// IN_R2
initial
begin
	IN_R2 = 1'b0;
	IN_R2 = #30000 1'b1;
	IN_R2 = #5000 1'b0;
	IN_R2 = #135000 1'b1;
	IN_R2 = #10000 1'b0;
	IN_R2 = #20000 1'b1;
	IN_R2 = #30000 1'b0;
	IN_R2 = #20000 1'b1;
	IN_R2 = #20000 1'b0;
	IN_R2 = #195000 1'b1;
	# 5000;
	repeat(10)
	begin
		IN_R2 = 1'b0;
		IN_R2 = #5000 1'b1;
		# 5000;
	end
	IN_R2 = 1'b0;
	IN_R2 = #90000 1'b1;
	IN_R2 = #50000 1'b0;
	IN_R2 = #70000 1'b1;
	IN_R2 = #40000 1'b0;
end 

// IN_R3
initial
begin
	IN_R3 = 1'b0;
	IN_R3 = #30000 1'b1;
	IN_R3 = #5000 1'b0;
	IN_R3 = #5000 1'b1;
	IN_R3 = #35000 1'b0;
	IN_R3 = #125000 1'b1;
	IN_R3 = #30000 1'b0;
	IN_R3 = #40000 1'b1;
	IN_R3 = #10000 1'b0;
	IN_R3 = #80000 1'b1;
	IN_R3 = #120000 1'b0;
	IN_R3 = #180000 1'b1;
	IN_R3 = #50000 1'b0;
	IN_R3 = #70000 1'b1;
	IN_R3 = #40000 1'b0;
end 

// IN_UMPIRE
initial
begin
	IN_UMPIRE = 1'b0;
	IN_UMPIRE = #10000 1'b1;
	IN_UMPIRE = #100000 1'b0;
	IN_UMPIRE = #10000 1'b1;
	IN_UMPIRE = #170000 1'b0;
	IN_UMPIRE = #10000 1'b1;
	IN_UMPIRE = #330000 1'b0;
	IN_UMPIRE = #10000 1'b1;
	IN_UMPIRE = #90000 1'b0;
	IN_UMPIRE = #10000 1'b1;
	IN_UMPIRE = #40000 1'b0;
	IN_UMPIRE = #40000 1'b1;
	IN_UMPIRE = #40000 1'b0;
	IN_UMPIRE = #10000 1'b1;
end 
endmodule

